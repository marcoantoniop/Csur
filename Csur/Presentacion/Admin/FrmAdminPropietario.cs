using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Data.Entity;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using Csur.Datos;
using Csur.Negocio;
using DevExpress.XtraEditors;
using DevExpress.XtraExport.Helpers;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid;


namespace Csur.Presentacion.Admin
{
    public partial class FrmAdminPropietario : Csur.Presentacion.FrmMaestro
    {
        private DBcsurEntities dbContext = new DBcsurEntities();
        private EntidadFASE miEntidadFase = new EntidadFASE();
        private EntidadPERSONA miEntidadPersona = new EntidadPERSONA();
        private EntidadLOTE miEntidadLote = new EntidadLOTE();
        private EntidadCUENTA miEntidadCuenta = new EntidadCUENTA();
        private string mensajeError;
        public FrmAdminPropietario()
        {
            InitializeComponent();

            this.InicializaDatosPersona();
            this.InicializaDatosLote();
            this.InicializaDatosPropietario();
        }

        private void InicializaDatosPersona()
        {
            dbContext.PERSONA.Load();
            var filtroPersona = dbContext.PERSONA.Local
                .Where(x => x.Tipo.Equals("socio"));
            pERSONABindingSource.DataSource = filtroPersona;
        }

        private void InicializaDatosLote()
        {
            dbContext.LOTE.Load();
            // This line of code is generated by Data Source Configuration Wizard
            lOTEBindingSource.DataSource = dbContext.LOTE.Local.ToBindingList();
        }

        private void InicializaDatosPropietario()
        {
            dbContext.PROPIETARIO.Load();
            pRopietarioBindingSource.DataSource = dbContext.PROPIETARIO.Local.ToBindingList();
            gridView1.OptionsBehavior.Editable = false;
            gridView1.OptionsSelection.EnableAppearanceFocusedCell = false;

        }

        private void listBoxControlPersona_SelectedIndexChanged(object sender, EventArgs e)
        {
            //Mensajes.MensajeRapido(listBoxControlPersona.SelectedIndex.ToString());
            miEntidadPersona = (EntidadPERSONA) listBoxControlPersona.SelectedItem;
            //gridView1.RefreshEditor(true);
            gridView1.Appearance.Reset();
            //Mensajes.MensajeRapido(miEntidadPersona.Nombre + " - " + miEntidadPersona.Apellido);
            //if(gridView1.Appearance.)
            //gridView1.SetAutoFilterValue(colIdLote,"2",AutoFilterCondition.BeginsWith);
            //gridView1.SetAutoFilterValue(colIdLote,);
            /*
            if (gridView1.Columns["colIdLote"] == 1)

            {

            }
            */
            /*
            for (int i = 0; i < gridView1.RowCount; i++)
            {
                gridView1.GetRow(i);
                gridControl1.MainView.Appearance.
            }
            */

        }

        private void gridView1_RowCellStyle(object sender, DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs e)
        {

            /*
            GridView view = sender as GridView;
            //if (e.Column.FieldName == "colIdPersona")

            if (e.Column.FieldName == "IdPersona")
            {
                int valor = 0;
                try
                {
                    valor = Convert.ToInt32(view.GetRowCellValue(e.RowHandle, view.Columns["IdPersona"]).ToString());
                }
                catch (Exception exception)
                {
                    valor = 0;
                }
                
                if (valor == miEntidadPersona.IdPersona)
                {
                    Mensajes.MensajeRapido("Coincide");
                    e.Appearance.BackColor = Color.Aqua;
                    e.Appearance.BackColor2 = Color.LightCyan;
                }
                else
                {
                    e.Appearance.BackColor = Color.DarkSlateGray;
                    e.Appearance.BackColor2 = Color.Black;
                }

            }
            */
            
        }

        private void gridView1_RowStyle(object sender, RowStyleEventArgs e)
        {
            string valor = "";
            try
            {
                valor = miEntidadPersona.IdPersona.ToString();
            }
            catch (Exception exception)
            {
                valor = "";
            }

            GridView view = sender as GridView;
            if (e.RowHandle >= 0)
            {
                //int ver = 0;
                string miIdPersona = view.GetRowCellDisplayText(e.RowHandle, view.Columns["IdPersona"]);
                if (miIdPersona == valor)
                {
                    e.Appearance.BackColor = Color.Green;
                    e.Appearance.BackColor2 = Color.SeaShell;
                    e.HighPriority = true;
                    //view.MakeRowVisible(e.RowHandle, true);
                    //ver = RowVisibleState.Visible;
                    //view.IsRowVisible(e.RowHandle,RowVisibleState);

                }
                else
                {
                    //e.Appearance.BackColor = Color.DarkGray;
                    //e.Appearance.BackColor2 = Color.Black;
                    
                    //view.IsRowVisible(e.RowHandle, 0);
                    //view.MakeRowVisible(e.RowHandle, false);
                    //ver = RowVisibleState.Hidden;
                }

                
            }
        }

        private void BtnCuentas_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            var miCuenta = dbContext.CUENTA.Where(cuenta => cuenta.IdPersona == miEntidadPersona.IdPersona).ToList();
            if (miCuenta.Count == 0)
            {
                miEntidadCuenta = new EntidadCUENTA();
                miEntidadCuenta.IdPersona = miEntidadPersona.IdPersona;
                AbrirControlCuenta(miEntidadPersona.Nombre + " " + miEntidadPersona.Apellido, miEntidadCuenta,true);
            }
            else if(miCuenta.Count == 1)
            {
                miEntidadCuenta = miCuenta[0];
                AbrirControlCuenta(miEntidadPersona.Nombre + " " + miEntidadPersona.Apellido, miEntidadCuenta, false);
                
            }
            else
            {
                Mensajes.MensajeRapido("EXISTE UN ERROR DE CUENTAS, CUENTAS DUPLICADAS, NO SE PUEDE CONTINUAR");
            }

        }


        private void AbrirControlCuenta(string nombreSocio, EntidadCUENTA miEntidad, bool nuevoRegistro)
        {
            /*************************
             * CREAMOS EL CONTROL
             *************************/

            Controles.ControlCuenta miControl = new Controles.ControlCuenta();
            XtraDialogArgs miDialogo = new XtraDialogArgs();
            miDialogo.Showing += Args_Showing;
            miDialogo.Content = miControl;
            miDialogo.Caption = "ESTABLECER CUENTA BANCARIA";
            miDialogo.Buttons = new DialogResult[] { DialogResult.OK, DialogResult.Cancel };

            /**********************************
             * SI HAY ESTABLECEMOS PROPIEDADES
             * ********************************/
            miControl.entidadCUENTABindingSource.DataSource = miEntidad;
            miControl.txtSocio.Text = nombreSocio;
            /*************************************
             * MOSTRAMOS EL DIALOGO EN PANTALLA
             * ***********************************/
            DialogResult miResultado = XtraDialog.Show(miDialogo);
            /***************************************
             * AL CERRARSE VERIFICAMOS EL BOTON OK
             * *************************************/
            if (miResultado == DialogResult.OK)
            {
                miEntidad = (EntidadCUENTA)miControl.entidadCUENTABindingSource.Current;
                /**********************************************************
                 * VERIFICAMOS LOS CAMPOS LLENADOS DE FORMA OBLIGATORIA
                 * ********************************************************/
                if (verificaCamposObligatoriosMiControlCuenta(miEntidad))
                {
                    if (nuevoRegistro)
                    {
                        dbContext.CUENTA.Add(miEntidad);
                    }
                    else
                    {
                        var temp = dbContext.CUENTA.Find(miEntidad.IdCuenta);
                        dbContext.Entry(temp).CurrentValues.SetValues(miEntidad);
                    }

                    
                    dbContext.SaveChanges();
                    Mensajes.MensajeRapido("DATOS DE LA CUENTA GUARDADO CORRECTAMENTE");

                    
                }
                else
                {
                    Mensajes.MensajeSimple("Falta información", this.mensajeError, MessageBoxIcon.Stop);
                }
                
            }
        }

        private bool verificaCamposObligatoriosMiControlCuenta(EntidadCUENTA entidadControl)
        {
            bool resultado = true;
            mensajeError = "";
            if (entidadControl.Banco == null)
            {
                mensajeError = "Nombre del Banco" + Environment.NewLine;
                resultado = false;
            }
            if (entidadControl.Cuenta1 == null)
            {
                mensajeError += "Número de la cuenta" + Environment.NewLine;
                resultado = false;
            }

            return resultado;
        }
    }
}
