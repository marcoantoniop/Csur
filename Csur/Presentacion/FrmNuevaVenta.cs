using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Data.Entity;
using System.Linq;
using Csur.Datos;
using Csur.Modelo;
using Csur.Negocio;
using Csur.Presentacion.Controles;
using DevExpress.XtraEditors;

namespace Csur.Presentacion
{
    public partial class FrmNuevaVenta : Csur.Presentacion.FrmMaestro
    {
        private DBcsurEntities dbContext = new DBcsurEntities();
        private EntidadLOTE miEntidadLote = new EntidadLOTE();
        private EntidadCLIENTE miEntidadCliente = new EntidadCLIENTE();
        private EntidadPLANCUENTAS miEntidadPlancuentas = new EntidadPLANCUENTAS();
        private EntidadVENTA miEntidadVenta = new EntidadVENTA();
        private EntidadPERSONA miEntidadPersona = new EntidadPERSONA();
        private List<EntidadPLANCUENTAS> miListaPlanCuentas = new List<EntidadPLANCUENTAS>();
        private decimal miMontoPorMes;
        private decimal miSaldo = 0;
        private DateTime miFechaPago = DateTime.Now;
        public FrmNuevaVenta()
        {
            InitializeComponent();
            this.DesactivarTabs();
            this.InicializaDatosLotes();
            this.InicializaDatosCliente();
            this.InicializaDatosClaseVenta();
            this.InicializaDatosPersona();
            pagosPrimerPagoDateEdit.DateTime = DateTime.Now;
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            //Csur.Datos.DBcsurEntities dbContext = new Csur.Datos.DBcsurEntities();
            // Call the Load method to get the data for the given DbSet from the database.
            //dbContext.LOTE.Load();
            // This line of code is generated by Data Source Configuration Wizard
            //lOTEBindingSource.DataSource = dbContext.LOTE.Local.ToBindingList();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            //Csur.Datos.DBcsurEntities dbContext = new Csur.Datos.DBcsurEntities();
            // Call the Load method to get the data for the given DbSet from the database.
            //dbContext.CLIENTE.Load();
            // This line of code is generated by Data Source Configuration Wizard
            //cLIENTEBindingSource.DataSource = dbContext.CLIENTE.Local.ToBindingList();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext

            //Csur.Datos.DBcsurEntities dbContext = new Csur.Datos.DBcsurEntities();
            // Call the Load method to get the data for the given DbSet from the database.
            //dbContext.PLANCUENTAS.Load();
            // This line of code is generated by Data Source Configuration Wizard
            //pLANCUENTASBindingSource.DataSource = dbContext.PLANCUENTAS.Local.ToBindingList();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            //Csur.Datos.DBcsurEntities dbContext = new Csur.Datos.DBcsurEntities();
            // Call the Load method to get the data for the given DbSet from the database.
            //dbContext.PERSONA.Load();
            // This line of code is generated by Data Source Configuration Wizard
            //pERSONABindingSource.DataSource = dbContext.PERSONA.Local.ToBindingList();
        }


        /*******************************
         *
         * 
         * EVENTOS OBJETOS Y BOTONES
         *
         * 
         ******************************/

        #region EventosObjetosBotones

        private void BtnIniciarVenta_Click(object sender, EventArgs e)
        {
            this.ActivarTab("b");
        }
        private void BtnVentaPaso2_Click(object sender, EventArgs e)
        {
            if (this.VerificarTabLotes())
            {
                //pagosMontoTotalLabel.Text = Modelo.ClassVenta.EntidadLote.Precio.ToString() + " $us.";
                this.ActivarTab("c");
                gridControlPropiedad.Enabled = false;
            }
        }
        private void BtnVentaPaso3_Click(object sender, EventArgs e)
        {
            // Verificamos el estado del tipo de cliente
            // Nuevo o Existente
            if (!toggleSwitchExisteCliente.IsOn)
            {
                //Mensajes.MensajeRapido("Existente");
                // Cliente existente
                if (VerificarClienteSeleccionado())
                {
                    // Guardar cliente
                    miEntidadCliente = (Datos.EntidadCLIENTE) searchLookUpViewCliente.GetFocusedRow();
                    Modelo.ClassVenta.EntidadCliente = miEntidadCliente;
                    txtClienteNombre.Text = miEntidadCliente.Nombre;
                    txtClienteTelefono.Text = miEntidadCliente.Telefono;
                    txtClienteCi.Text = miEntidadCliente.Ci;
                    this.ActivarTab("d");
                    tabPagC.Enabled = false;
                }
                else
                {
                    
                    Mensajes.MensajeSimple("Selecciona un Cliente","Debe seleccionar un cliente para poder continuar",MessageBoxIcon.Exclamation);
                }
            }
            else
            {
                //Mensajes.MensajeRapido("Nuevo");
                // Cliente Nuevo
                if (VerificarClienteNuevo())
                {
                    dbContext.CLIENTE.Add(miEntidadCliente);
                    dbContext.SaveChanges();
                    Modelo.ClassVenta.EntidadCliente = miEntidadCliente;
                    this.ActivarTab("d");
                    tabPagC.Enabled = false;
                }
                else
                {
                    Mensajes.MensajeSimple("Selecciona un Cliente", "Debe llenar los datos de un cliente para poder continuar", MessageBoxIcon.Exclamation);
                }
                //groupControlClienteExistente.Enabled = true;
                //groupControlClienteNuevo.Enabled = false;
            }
        }

        private void BtnGenerarPlanPagos_Click(object sender, EventArgs e)
        {

            miEntidadPlancuentas = new EntidadPLANCUENTAS();
            miListaPlanCuentas = new List<EntidadPLANCUENTAS>();
            pagosPlanPagosListBoxControl.DataSource = miListaPlanCuentas;

            if (Convert.ToInt32(pagosNumDePagosSpin.Value.ToString()) <= 1)
            {
                if (Convert.ToInt32(pagosNumDePagosSpin.Value.ToString()) == 1)
                {
                    miEntidadPlancuentas = new EntidadPLANCUENTAS();
                    miListaPlanCuentas = new List<EntidadPLANCUENTAS>();
                    pagosPrimerPagoTxt.Text = ClassVenta.EntidadLote.Precio.ToString();

                    Modelo.ClassVenta.MontoPrimerPago = Convert.ToDecimal(pagosPrimerPagoTxt.Text);
                    Modelo.ClassVenta.NumPagos = Convert.ToInt32(pagosNumDePagosSpin.Value.ToString());
                    miEntidadPlancuentas.Saldo = 0;
                    miEntidadPlancuentas.Monto = ClassVenta.EntidadLote.Precio;
                    
                    //pagosPrimerPagoDateEdit.DateTime = DateTime.Now;
                    miEntidadPlancuentas.Fecha = pagosPrimerPagoDateEdit.DateTime;
                    ClassVenta.EntidadVenta.FechaContrato = pagosPrimerPagoDateEdit.DateTime;
                    miListaPlanCuentas.Add(miEntidadPlancuentas);
                    pagosPlanPagosListBoxControl.DataSource = miListaPlanCuentas;
                    ClassVenta.ListaPlanCuentas = miListaPlanCuentas;
                    ClassVenta.PlanCuentasGenerado = true;
                }
                else
                {
                    Mensajes.MensajeRapido("Número de meses inválido");
                }
            }
            else
            {
                if (ValidarDatosPlanCuentas())
                {
                    miEntidadPlancuentas = new EntidadPLANCUENTAS();
                    Modelo.ClassVenta.MontoPrimerPago = Convert.ToDecimal(pagosPrimerPagoTxt.Text);
                    Modelo.ClassVenta.NumPagos = Convert.ToInt32(pagosNumDePagosSpin.Value.ToString());
                    miListaPlanCuentas = new List<EntidadPLANCUENTAS>();
                    //decimal montoPorMes = 0;
                    miSaldo = Math.Round(Convert.ToDecimal(ClassVenta.EntidadLote.Precio), 2, MidpointRounding.AwayFromZero);
                    miMontoPorMes = (decimal)ClassVenta.EntidadLote.Precio - (decimal)ClassVenta.MontoPrimerPago;
                    miMontoPorMes = Math.Round(miMontoPorMes / (ClassVenta.NumPagos - 1), 2, MidpointRounding.AwayFromZero);
                    ////miMontoPorMes = (Convert.ToDecimal(ClassVenta.EntidadLote.Precio) - ClassVenta.MontoPrimerPago) / ClassVenta.NumPagos;
                    //Mensajes.MensajeRapido(miSaldo.ToString() + " *-* " + miMontoPorMes.ToString());
                    for (int i = 0; i < Convert.ToInt32(pagosNumDePagosSpin.Value); i++)
                    {
                        miEntidadPlancuentas = new EntidadPLANCUENTAS();
                        if (i == 0)
                        {
                            miFechaPago = pagosPrimerPagoDateEdit.DateTime;
                            ClassVenta.EntidadVenta.FechaContrato = pagosPrimerPagoDateEdit.DateTime;
                            miSaldo = miSaldo - (decimal)ClassVenta.MontoPrimerPago;
                            miEntidadPlancuentas.Fecha = pagosPrimerPagoDateEdit.DateTime;
                            //miSaldo = miSaldo - (decimal)Convert.ToDecimal(pagosPrimerPagoTxt.Text);

                            miEntidadPlancuentas.Monto = Modelo.ClassVenta.MontoPrimerPago;
                            miEntidadPlancuentas.NumCuota = i + 1;
                            //miEntidadPlancuentas.Saldo = (decimal)ClassVenta.EntidadLote.Precio - (decimal)ClassVenta.MontoPrimerPago; 
                            miEntidadPlancuentas.Saldo = miSaldo;

                        }
                        else
                        {
                            miSaldo = miSaldo - miMontoPorMes;
                            miFechaPago = miFechaPago.AddMonths(1);

                            if (i == Convert.ToInt32(pagosNumDePagosSpin.Value) - 1)
                            {
                                Decimal tempSaldo = miSaldo;
                                if (tempSaldo == 0)
                                {
                                    //todo en orden
                                    tempSaldo = 0;
                                }
                                else
                                {
                                    //agregamos el faltante al mes anterior
                                    Mensajes.MensajeRapido("Se agregaron: " + tempSaldo.ToString() + " centavos del siguiente mes para tener saldo 0.");
                                    //miSaldo = miSaldo - tempSaldo;
                                    //miMontoPorMes = miMontoPorMes + tempSaldo;
                                    if (miSaldo > 0)
                                    {
                                        miMontoPorMes = miMontoPorMes + tempSaldo;
                                        miSaldo = miSaldo - tempSaldo;
                                    }
                                    else
                                    {
                                        miMontoPorMes = miMontoPorMes + tempSaldo;
                                        miSaldo = miSaldo - tempSaldo;
                                    }

                                }
                                //miEntidadPlancuentas.Saldo = 0;
                                miEntidadPlancuentas.Fecha = miFechaPago;
                                miEntidadPlancuentas.Monto = miMontoPorMes;

                                miEntidadPlancuentas.NumCuota = i;
                                miEntidadPlancuentas.Saldo = miSaldo;
                            }
                            else
                            {
                                miEntidadPlancuentas.Fecha = miFechaPago;
                                miEntidadPlancuentas.Monto = miMontoPorMes;
                                miEntidadPlancuentas.NumCuota = i;
                                miEntidadPlancuentas.Saldo = miSaldo;
                            }



                            //Mensajes.MensajeRapido(miEntidadPlancuentas.Monto.ToString() + "--" + miEntidadPlancuentas.Saldo.ToString() + " ** " + miMontoPorMes.ToString());
                        }
                        miEntidadPlancuentas.Estado = "pendiente";
                        miListaPlanCuentas.Add(miEntidadPlancuentas);
                    }

                    pagosPlanPagosListBoxControl.DataSource = miListaPlanCuentas;
                    ClassVenta.ListaPlanCuentas = miListaPlanCuentas;
                    ClassVenta.PlanCuentasGenerado = true;



                }
                else
                {
                    Mensajes.MensajeRapido("Revise los datos por favor.");
                }

            }



            
        }

        private void BtnVentaPaso4_Click(object sender, EventArgs e)
        {
            if (ClassVenta.PlanCuentasGenerado)
            {
                ClassVenta.ModalidadPago = Convert.ToString(pagosModalidadPadioGroup.GetItemRectangle(pagosModalidadPadioGroup.SelectedIndex));
                ClassVenta.ObservacionVenta = pagosObservacionesRichTextBox.Text;
                this.ActivarTab("e");
                tabPagD.Enabled = false;

            }
            else
            {
                Mensajes.MensajeRapido("Revise su plan de cuentas");
            }
        }

        private void BtnVerPlanPagosNuevaVentana_Click(object sender, EventArgs e)
        {
            Controles.ControlPlanCuentas miControl = new ControlPlanCuentas();
            miControl.pLANCUENTASBindingSource.DataSource = miListaPlanCuentas;
            XtraDialogArgs miDialogo = new XtraDialogArgs();
            miDialogo.Showing += this.Args_ShowingSimple;
            miDialogo.Content = miControl;miDialogo.Caption = "PLAN DE CUENTAS";
            miDialogo.Buttons = new DialogResult[] { DialogResult.OK };
            DialogResult miResultado = XtraDialog.Show(miDialogo);
        }

        private void BtnVentaPaso5_Click(object sender, EventArgs e)
        {
            this.ActivarTab("f");
            tabPagE.Enabled = false;
        }

        private void BtnRevisarGuardarTodo_Click(object sender, EventArgs e)
        {

        }


        #endregion

        /**********************************
         * 
         * 
         *    EVENTOS NAVBAR
         * 
         * 
         **********************************/

        #region EventosNavBar

        private void tabPageB_Activo(bool activado)
        {
            if (activado)
            {
                BtnVentaPaso2.Enabled = true;
                gridControlPropiedad.Enabled = true;
                mapControlLote.Enabled = true;
            }
            else
            {
                BtnVentaPaso2.Enabled = false;
                gridControlPropiedad.Enabled = false;
                mapControlLote.Enabled = false;
            }
        }
        private void tabPagB_Enter(object sender, EventArgs e)
        {
            /*
            Mensajes.MensajeRapido("se va ha sobreescrfibir el lote escogido");
            if (Modelo.ClassVenta.EntidadLoteLlenado)
            {
                Mensajes.MensajeRapido("se va ha sobreescrfibir el lote escogido");
            }
            */
        }
        private void searchLookCliente_EditValueChanged(object sender, EventArgs e)
        {
            if (this.VerificarClienteSeleccionado())
            {
                miEntidadCliente = (Datos.EntidadCLIENTE)searchLookUpViewCliente.GetFocusedRow();
                txtClienteNombre.Text = miEntidadCliente.Nombre;
                txtClienteTelefono.Text = miEntidadCliente.Telefono;
                txtClienteCi.Text = miEntidadCliente.Ci;
            }
        }

        private void adicionalSearchVendedor_EditValueChanged(object sender, EventArgs e)
        {
            miEntidadPersona = (EntidadPERSONA)adicionalSearchLookUpEditViewVendedor.GetFocusedRow();
        }

        private void tabPagD_Enter(object sender, EventArgs e)
        {
            this.pagosMontoTotalLabel.Text = Modelo.ClassVenta.EntidadLote.Precio.ToString() + " - $us.";
            
            if (ClassVenta.EntidadVenta.FechaContrato == DateTime.MinValue)
            {
                pagosPrimerPagoDateEdit.DateTime = DateTime.Now;

            }
            else
            {
                pagosPrimerPagoDateEdit.DateTime = ClassVenta.EntidadVenta.FechaContrato;
            }
        }

        #endregion


        /***********************************
         * 
         * 
         *       INICIALIZADORES
         *    
         *    
         ***********************************/
        #region Inicializadores

        private void InicializaDatosClaseVenta()
        {
            ClassVenta.EntidadLote = miEntidadLote;
            ClassVenta.EntidadCliente = miEntidadCliente;
            ClassVenta.EntidadVenta = miEntidadVenta;
            ClassVenta.ListaPlanCuentas = miListaPlanCuentas;
        }

        private void InicializaDatosLotes()
        {
            dbContext.LOTE.Load();
            //lOTEBindingSource.DataSource = dbContext.LOTE.Local.ToBindingList();
            var filtroLotes = dbContext.LOTE.Local
                .Where(x => x.Estado.Equals("disponible"));
            lOTEBindingSource.DataSource = filtroLotes;
        }

        private void InicializaDatosCliente()
        {
            dbContext.CLIENTE.Load();
            // This line of code is generated by Data Source Configuration Wizard
            cLIENTEBindingSource.DataSource = dbContext.CLIENTE.Local.ToBindingList();
        }

        private void InicializaDatosPersona()
        {
            dbContext.PERSONA.Load();
            pERSONABindingSource.DataSource = dbContext.PERSONA.Local.ToBindingList();
        }

        protected void Args_ShowingSimple(object sender, XtraMessageShowingArgs e)
        {
            e.Buttons[DialogResult.OK].Text = "Cerrar";
            
        }


        #endregion
        /***********************************
         * 
         * 
         *       VERIFICADORES
         *    
         *    
         ***********************************/

        #region Verificadores

        private bool VerificarTabLotes()
        {
            bool resultado = false;

            if (gridViewPropiedad.FocusedRowHandle == -1)
            {
                Mensajes.MensajeSimple("ERROR","Debe seleccionar un LOTE para poder continuar",MessageBoxIcon.Exclamation);
                resultado = false;
            }
            else
            {
                miEntidadLote = (Datos.EntidadLOTE) gridViewPropiedad.GetFocusedRow();
                //Mensajes.MensajeRapido("Paso Id:--" + miEntidadLote.IdLote.ToString());
                Modelo.ClassVenta.EntidadLote = miEntidadLote;
                Modelo.ClassVenta.EntidadLoteLlenado = true;
                resultado = true;
            }
            return resultado;
        }

        private bool VerificarClienteSeleccionado()
        {
            int miCodCliente = 0;
            bool resultado = false;
            try
            {
                miCodCliente = Convert.ToInt32(searchLookCliente.EditValue.ToString());
            }
            catch (Exception e)
            {
                resultado = false;
            } 

            if (miCodCliente > 0)
            {
                resultado = true;
            }
            else
            {
                resultado = false;
            }

            return resultado;
        }
        private bool VerificarClienteNuevo()
        {
            bool resultado = false;
            try
            {
                this.miEntidadCliente = new EntidadCLIENTE();
                miEntidadCliente.Nombre = controlCliente1.NombreTextEdit.Text;
                miEntidadCliente.Ci = controlCliente1.CiTextEdit.Text;
                miEntidadCliente.Telefono = controlCliente1.TelefonoTextEdit.Text;
                miEntidadCliente.Ciudad = controlCliente1.CiudadTextEdit.Text;
                miEntidadCliente.Correo = controlCliente1.CorreoTextEdit.Text;
                miEntidadCliente.Telefono = controlCliente1.TelefonoTextEdit.Text;
                miEntidadCliente.Direccion = controlCliente1.DireccionTextEdit.Text;
                miEntidadCliente.NombreUsuario = controlCliente1.NombreUsuarioTextEdit.Text;
                miEntidadCliente.Clave = controlCliente1.ClaveTextEdit.Text;
                miEntidadCliente.FechaNacimiento = controlCliente1.FechaNacimientoDateEdit.DateTime;
                //Mensajes.MensajeRapido(miEntidadCliente.Nombre.ToString());
                resultado = true;
            }
            catch (Exception e)
            {
                Mensajes.ErrorEnDatos(e,"Faltan datos");
                //miEntidadCliente = new EntidadCLIENTE();
                resultado = false;
            }
            

            //controlCliente1.PerformLayout();
            //controlCliente1.dataLayoutControl1.ResumeLayout();
            //controlCliente1.dataLayoutControl1.PerformLayout();
            //controlCliente1.dataLayoutControl1.RetrieveFields();
            //controlCliente1.cLIENTEBindingSource.AddNew();
            
            return resultado;
        }

        private bool ValidarDatosPlanCuentas()
        {
            bool resultado = true;
            if (Convert.ToInt32(pagosNumDePagosSpin.Value.ToString()) > 0)
            {
                //resultado = true;
            }
            else
            {
                resultado = false;
            }

            if (Convert.ToDecimal(pagosPrimerPagoTxt.Text.ToString()) > 0)
            {
                //resultado = true;
            }
            else
            {
                resultado = false;
            }

            if (pagosPrimerPagoDateEdit.DateTime >= DateTime.Today)
            {

            }
            else
            {
                resultado = false;
            }
            return resultado;
        }
        #endregion

        /***********************************
         * 
         * 
         *       CONTROL TABS
         *    
         *    
         ***********************************/
        #region ControlTabs

        private void ActivarTab(string activarTab = "a")
        {
            switch (activarTab)
            {
                case "a":
                    tabPagA.PageVisible = true;
                    tabPagA.Enabled = true;
                    break;
                case "b":
                    
                    tabPagB.Enabled = true;
                    tabPane1.SelectedPage = tabPagB;
                    break;
                case "c":
                    tabPagC.Enabled = true;
                    tabPane1.SelectedPage = tabPagC;
                    break;
                case "d":
                    tabPagD.Enabled = true;
                    tabPane1.SelectedPage = tabPagD;
                    break;
                case "e":
                    tabPagE.Enabled = true;
                    tabPane1.SelectedPage = tabPagE;
                    break;
                case "f":
                    tabPagF.Enabled = true;
                    tabPane1.SelectedPage = tabPagF;
                    break;

            }
        }

        private void DesactivarTabs()
        {
            
            this.tabPagB.Enabled = false;
            this.tabPagC.Enabled = false;
            this.tabPagD.Enabled = false;
            this.tabPagE.Enabled = false;
            this.tabPagF.Enabled = false;
            

        }


        private void toggleSwitchExisteCliente_Toggled(object sender, EventArgs e)
        {
            if (toggleSwitchExisteCliente.IsOn)
            {
                groupControlClienteExistente.Enabled = false;
                groupControlClienteNuevo.Enabled = true;
            }
            else
            {
                groupControlClienteExistente.Enabled = true;
                groupControlClienteNuevo.Enabled = false;
            }
        }

        private void tabPagF_Enter(object sender, EventArgs e)
        {
            revisarControlPlanCuentas.pLANCUENTASBindingSource.DataSource = ClassVenta.ListaPlanCuentas;
            revisarLabelCiCliente.Text = ClassVenta.EntidadCliente.Ci;
            revisarLabelNombreCliente.Text = ClassVenta.EntidadCliente.Nombre;
            revisarLabelTelCliente.Text = ClassVenta.EntidadCliente.Telefono;
            revisarLabelDireccionCliente.Text = ClassVenta.EntidadCliente.Direccion;
            revisarLabelFecha.Text = String.Format("{0:dddd, MMMM d, yyyy}", ClassVenta.EntidadVenta.FechaContrato);
            revisarLabelPrecioTotal.Text = ClassVenta.EntidadLote.Precio.ToString() + " $us.";
            revisarLabelPromotor.Text = ClassVenta.EntidadPersona.Nombre + " " + ClassVenta.EntidadPersona.Apellido;
        }




        #endregion

        
    }
}
